{"version":3,"sources":["logo.svg","components/ListItems.js","components/AddTasksToList.js","App.js","reportWebVitals.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","type","id","key","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","document","addEventListener","duration","easing","library","add","faTrash","AddTasksToList","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newItems","getItemsFromLS","localStorage","getItem","JSON","parse","addItemtoLS","push","setItem","stringify","displayItems","forEach","filteredItems","filter","deleteItemFromLS","index","splice","updated_items","updateLS","window","this","onSubmit","placeholder","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c60f4043.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport './ListItems.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move'\nfunction ListItems(props) {\n    const items = props.items;\n    const listItems = items.map(item => {\n        // we cannot edit the text in li, we have to make it an input field\n        return <li className = 'list-items collection-items' key = {item.key}> \n        <input type = 'text' id = {item.key} value = {item.text} onChange = {\n            (e) => {\n                props.setUpdate(e.target.value, item.key)\n            }\n        }/>\n       <span> <FontAwesomeIcon onClick = {() => props.deleteItem(item.key)} className = 'faicons' icon = 'trash'/> </span>\n            </li>\n    })\n    document.addEventListener('DOMContentLoaded', <ul className = 'list collection'>\n            {/* To add some animation */}\n        <FlipMove duration = {200} easing = 'ease-in-out'>\n            {listItems}\n        </FlipMove>\n        </ul>)\n    return (\n       <ul className = 'list collection'>\n           {/* To add some animation */}\n        <FlipMove duration = {200} easing = 'ease-in-out'>\n           {listItems}\n        </FlipMove>\n        </ul>\n    )\n}\nexport default ListItems\n","import './App.css';\nimport React, { Component } from 'react'\nimport ListItems from './ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash) \nclass AddTasksToList extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             items : [],\n             currentItem : {\n                 text : '',\n                 key : ''\n             }\n        }\n    }\n    handleInput = (e) => {\n        this.setState({\n            currentItem : {\n                text : e.target.value,\n                key : Date.now()\n            }\n        })\n    }\n\n    addItem = (e) => {\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        if(newItem.text !== ''){\n            const newItems = [...this.state.items, newItem];\n            this.setState({\n                items: newItems,\n                currentItem : {\n                    text : '',\n                    key : Date.now()\n                }\n            })\n            // making sure that item should not be empty, to avoid error\n            if(newItem.text !== ''){\n                return newItem\n            }\n        }\n    }\n    // getting items from LS\n    getItemsFromLS = () => {\n        let items;\n        if(localStorage.getItem('items') === null){\n            items = []\n        } else {\n            items = JSON.parse(localStorage.getItem('items'))\n        }\n        return items;\n    }\n\n    addItemtoLS = (e) => {\n        const items = this.getItemsFromLS();\n        const item = this.addItem(e);\n        // if there is item, push it to items array in LS\n        if(item){\n            items.push(item);\n        }\n        localStorage.setItem('items', JSON.stringify(items))\n    }\n\n    displayItems = (e) => {\n        const items = this.getItemsFromLS();\n        this.setState({\n            items : items\n        })\n        items.forEach(() => {\n            this.addItem(e)\n        });\n        <ListItems/>\n    }\n    // you will pass the key as a refernce, it will match the key to all the items key and filter out the items with which the key does not match and automatically delete the item with with the key matches\n    deleteItem = (key) => {\n        const filteredItems = this.state.items.filter(item => item.key !== key)\n        this.setState({\n            items : filteredItems\n        })\n        this.deleteItemFromLS(key);\n    }\n    deleteItemFromLS = (key) => {\n        const items = this.getItemsFromLS();\n        items.forEach((item, index) => {\n            if(item.key === key){\n                items.splice(index,1);\n            }\n        });\n        localStorage.setItem('items', JSON.stringify(items));\n    }\n    setUpdate = (text, key) => {\n        const updated_items = this.state.items;\n        // loop through items\n        updated_items.map(item => {\n            if(item.key === key){\n                item.text = text;\n            }\n        })\n        this.setState({\n            items : updated_items\n        })\n        this.updateLS(text, key);\n    }\n\n    updateLS = (text, key) => {\n        const items = this.getItemsFromLS();\n        items.map(item => {\n            if(item.key === key){\n                item.text = text;\n            }\n            localStorage.setItem('items', JSON.stringify(items))\n        })\n    }\n    render() {\n        window.addEventListener('DOMContentLoaded', this.displayItems)\n        return (\n            <div className = 'container cont'>\n                <div className = 'row'>\n                    <div className = 'col-md-6 mx-auto'>\n                        <div className = 'mt-5 card card-body card-form'>\n                            <h1 className = 'text-center text-white'>Add Tasks to List</h1>\n                            <form className = 'form-group' id = 'to-do-form' onSubmit = {this.addItem}>\n                                <input className = 'mb-4 mt-3 form-control text-white' value = {this.state.currentItem.text} onChange = {this.handleInput} type = 'text' placeholder = 'Enter text'></input>\n                                <button onClick = {this.addItemtoLS} className = 'btn text-white' type = 'submit'>Add Task</button>\n                            </form>\n                                    <ListItems deleteItem = {this.deleteItem} items = {this.state.items}\n                                    setUpdate = {this.setUpdate}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default AddTasksToList\n\n","import logo from './logo.svg';\nimport AddTasksToList from './components/AddTasksToList'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AddTasksToList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}